package QuizProject.QuizPackage;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

import QuizProject.DBConnection;
import QuizProject.ModelObject;
import QuizProject.QuestionPackage.Question;
import QuizProject.QuizPackage.Score;

public class Quiz extends ModelObject {
	
	//static final constants
	private static final int RANKING_DISPLAY_TIME_INTERVAL = 1000 * 60 * 60 * 24 * 15;
	private static final int NUM_HISTORICAL_SCORES = 10;
	private static final int NUM_RECENT_QUIZZES = 3;
	
	public static ArrayList<Quiz> getMostPopularQuizzes(DBConnection connection) {
		ArrayList<Quiz> quizzes = new ArrayList<Quiz>();
		
		int quizCount = 0;
		ResultSet rs = connection.executeQuery("SELECT * FROM quizzes ORDER BY total_times_taken DESC");
		try {
			while (quizCount < NUM_RECENT_QUIZZES && rs.next()) {
				quizzes.add(new Quiz(rs.getInt("id"), connection));
				quizCount++;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
				
		return quizzes;
	}
	
	public static ArrayList<Quiz> getRecentlyCreatedQuizzes(DBConnection connection) {
		ArrayList<Quiz> quizzes = new ArrayList<Quiz>();
		int quizCount = 0;
		ResultSet rs = connection.executeQuery("SELECT * FROM quizzes ORDER BY date_created DESC");
		try {
			while (quizCount < NUM_RECENT_QUIZZES && rs.next()) {
				quizzes.add(new Quiz(rs.getInt("id"), connection));
				quizCount++;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
				
		return quizzes;
	}
	
	public Quiz(int id, DBConnection connection) {
		super(id, connection);
	}
	
	public void createModelObject(String name, String description, int creatorId) {
		this.createModelObject(name, description, creatorId, null);
	}
	
	protected void createModelObject(String name, String description, int creatorId, ArrayList<Object> additionalParameters) {
		ArrayList<Object> parameters = new ArrayList<Object>(Arrays.asList(name, description, creatorId, 0, 0, 0, 0, 0, 0, 0, 0, new ArrayList<String>(), new ArrayList<String>(), new ArrayList<String>(), System.currentTimeMillis()));
		
		if (additionalParameters != null) {
			parameters.addAll(additionalParameters);
		}
		
		super.createModelObject(parameters);
	}
	
	/**
	 * Getter for the name ivar
	 */
	public String getName() {
		return this.getString("name");
	}
	
	/**
	 * Setter for the name ivar
	 */
	public void setName(String name) {
		this.setString("name", name);
	}
	
	/**
	 * Getter for the description ivar
	 */
	public String getDescription() {
		return this.getString("description");
	}
	
	/**
	 * Setter for the description ivar
	 */
	public void setDescription(String description) {
		this.setString("description", description);
	}
	
	/**
	 * Getter for the creator ivar
	 */
	public int getCreatorId() {
		return this.getInt("creator_id");
	}
	
	public long getDateTaken() {
		return this.getLong("date_taken");
	}
	
	/**
	 * Getter for the question set
	 */
	public ArrayList<Question> getQuestions() {
		// NOT DONEZO
		return new ArrayList<Question>();
	}
		
	public void resetQuiz() {
		this.setInt("highest_score", 0);
		this.setInt("lowest_score", 0);
		this.setLong("longest_time", 0);
		this.setLong("shortest_time", 0);
		this.setLong("average_time", 0);
		this.setInt("mean_score", 0);
		this.setInt("total_times_taken", 0);
		this.setLong("total_time_spent_on_quiz", 0);
		this.setCSV("most_recent_csv", new ArrayList<String>());
		this.setCSV("best_all_time_csv", new ArrayList<String>());
		this.setCSV("best_interval_csv", new ArrayList<String>());
	}
	
	public int getHighestScore() {
		return this.getInt("highest_score");
	}
	
	public int getLowestScore() {
		return this.getInt("lowest_score");
	}
	
	public long getLongestTime() {
		return this.getLong("longest_time");
	}
	
	public long getShortestTime() {
		return this.getLong("shortest_time");
	}
	
	public long getAverageTime() {
		return this.getLong("average_time");
	}
	
	public int getMeanScore() {
		return this.getInt("mean_score");
	}
	
	public int getTotalTimesTaken() {
		return this.getInt("total_times_taken");
	}
	
	public int getTotalTimeSpentOnQuiz() {
		return this.getInt("total_time_spent_on_quiz");
	}
	
	public ArrayList<Integer> getMostRecentScoreIds() {
		return this.getIntCSV("most_recent_csv");
	}
	
	public ArrayList<Integer> getBestAllTimeScoreIds() {
		return this.getIntCSV("best_all_time_csv");
	}
	
	public ArrayList<Integer> getBestIntervalScoreIds() {
		return this.getIntCSV("best_interval_csv");
	}
	
	public void quizTaken(QuizSession session) {
		Score score = new Score(0, this.getConnection());
		score.createModelObject(session.getScore(), session.getQuizId(), session.getTakerId(), session.getDateTaken(), session.getDuration());
		
		if (score.getNumericalScore() > this.getHighestScore()) this.setInt("highest_score", score.getNumericalScore());
		if (score.getNumericalScore() < this.getLowestScore()) this.setInt("lowest_score", score.getNumericalScore());
		if (score.getDuration() > this.getLongestTime()) this.setLong("longest_time", score.getDuration());
		if (score.getDuration() < this.getShortestTime()) this.setLong("shortest_time", score.getDuration());
		long averageTime = (this.getAverageTime() * this.getTotalTimesTaken() + score.getDuration()) / (this.getTotalTimesTaken() + 1);
		this.setLong("average_time", averageTime);
		int meanScore = (this.getMeanScore() * this.getTotalTimesTaken() + score.getNumericalScore()) / (this.getTotalTimesTaken() + 1);
		this.setInt("mean_score", meanScore);
		this.setInt("total_times_taken", this.getTotalTimesTaken() + 1);
		this.setLong("total_time_spent_on_quiz", this.getLong("total_time_spent_on_quiz") + score.getDuration());
		
		this.updateMostRecentScores(score);
		this.updateBestAllTimeScores(score);
		this.updateBestIntervalScoreIds(score);
	}
	
	private void updateMostRecentScores(Score score) {
		ArrayList<Integer> mostRecentScoreIds = this.getIntCSV("most_recent_csv");
		mostRecentScoreIds.add(score.getID());
		while (mostRecentScoreIds.size() > NUM_HISTORICAL_SCORES) {
			mostRecentScoreIds.remove(NUM_HISTORICAL_SCORES);
		}
	}
	
	private void updateBestAllTimeScores(Score score) {
		ArrayList<Integer> bestAllTimeScoreIds = this.getIntCSV("best_all_time_csv");
		ArrayList<Score> bestAllTimeScores = new ArrayList<Score>();
		for (int scoreId : bestAllTimeScoreIds) {
			bestAllTimeScores.add(new Score(scoreId, this.getConnection()));
		}
		bestAllTimeScores.add(score);
		
		Collections.sort(bestAllTimeScores);
		while (bestAllTimeScores.size() > NUM_HISTORICAL_SCORES) {
			bestAllTimeScores.remove(NUM_HISTORICAL_SCORES);
		}
		
		bestAllTimeScoreIds.clear();
		for (Score historicalScore : bestAllTimeScores) {
			bestAllTimeScoreIds.add(historicalScore.getID());
		}
	}
	
	private void updateBestIntervalScoreIds(Score score) {
		ArrayList<Integer> bestIntervalScoreIds = this.getIntCSV("best_interval_csv");
		ArrayList<Score> bestIntervalScores = new ArrayList<Score>();
		for (int scoreId : bestIntervalScoreIds) {
			bestIntervalScores.add(new Score(scoreId, this.getConnection()));
		}
		
		long latestPossibleStartTime = System.currentTimeMillis() - RANKING_DISPLAY_TIME_INTERVAL;
		for (int index = 0; index < bestIntervalScores.size(); index++) {
			if (bestIntervalScores.get(index).getDateTaken() < latestPossibleStartTime) {
				bestIntervalScores.remove(index);
				index--;
			}
		}
		
		bestIntervalScores.add(score);
		
		Collections.sort(bestIntervalScores);
		while (bestIntervalScores.size() > NUM_HISTORICAL_SCORES) {
			bestIntervalScores.remove(NUM_HISTORICAL_SCORES);
		}
		
		bestIntervalScoreIds.clear();
		for (Score historicalScore : bestIntervalScores) {
			bestIntervalScoreIds.add(historicalScore.getID());
		}
	}
	
	public int getMaxScore(){
		int totalScore = 0;
		for (Question currQuestion: this.getQuestions()) {
			totalScore += currQuestion.getMaxScore();
		}
		return totalScore;
	}

}
