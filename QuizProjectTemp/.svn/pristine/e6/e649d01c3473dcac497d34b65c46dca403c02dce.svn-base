package Servlets;

import java.io.IOException;
import java.util.ArrayList;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import QuizProject.DBConnection;
import QuizProject.QuestionPackage.FillInTheBlankQuestion;
import QuizProject.QuestionPackage.MatchingQuestion;
import QuizProject.QuestionPackage.MultiMultipleChoiceQuestion;
import QuizProject.QuestionPackage.MultipleChoiceQuestion;
import QuizProject.QuestionPackage.OrderedMultiTextQuestion;
import QuizProject.QuestionPackage.PictureResponseQuestion;
import QuizProject.QuestionPackage.Question;
import QuizProject.QuestionPackage.ResponseQuestion;
import QuizProject.QuestionPackage.UnorderedMultiTextQuestion;
import QuizProject.QuizPackage.Quiz;
import QuizProject.UserPackage.User;

/**
 * Servlet implementation class GradeQuizServlet
 */
@WebServlet("/GradeQuizServlet")
public class GradeQuizServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public GradeQuizServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		DBConnection connection = (DBConnection) request.getServletContext().getAttribute(ContextListener.CONNECTION_KEY);
		User user = (User) request.getSession().getAttribute(SessionListener.AUTHENTICATED_USER_KEY);
		long startTime = Long.parseLong(request.getParameter("startTime"));
		long elapsedTime = System.currentTimeMillis()-startTime;
		int id = Integer.parseInt(request.getParameter("id"));
		Quiz quiz = new Quiz(id, connection);
		int maxScore = quiz.getMaxScore();
		int userScore = 0;
		int numAnswers =0;
		int answerIndex = 0;
		int displayIndex;
		ArrayList<Question> questions = quiz.getQuestions();
		for(int index=0;index<questions.size();index++){
			Question question = questions.get(index);
			numAnswers=question.getMaxScore();
			int numAnswersForQuestion = question.getMaxScore();
			if(question instanceof ResponseQuestion){ 
				displayIndex = answerIndex+1;
				String answer = request.getParameter("answer"+displayIndex);
				userScore+=((ResponseQuestion)question).getScore(answer);
				System.out.println("QR: "+((ResponseQuestion)question).getScore(answer));
			}else if(question instanceof FillInTheBlankQuestion){ 
				displayIndex = answerIndex+1;
				String answer = request.getParameter("answer"+displayIndex);
				userScore+=((FillInTheBlankQuestion)question).getScore(answer);
				System.out.println("FIB: "+((FillInTheBlankQuestion)question).getScore(answer));
			}else if(question instanceof MatchingQuestion){
				ArrayList<String> userAnswers = new ArrayList<String>();
				for(int Mindex=0;Mindex<numAnswers;Mindex++){
					int next = Mindex+1;
					displayIndex = answerIndex+1+Mindex;
					String answer = request.getParameter("answer"+displayIndex);
					userAnswers.add(answer);
					System.out.println("Matching answer "+answer);
				}
				userScore+=((MatchingQuestion)question).getScore(userAnswers);
				System.out.println("Matching: "+((MatchingQuestion)question).getScore(userAnswers));
			}else if(question instanceof MultiMultipleChoiceQuestion){
				ArrayList<Integer> userAnswers = new ArrayList<Integer>();
				for(int MMCindex=0;MMCindex<numAnswers;MMCindex++){
					displayIndex = answerIndex+MMCindex+1;
					String answer = request.getParameter("answer"+displayIndex);
					int chosenAnswer;
					if(answer.equals(null)) chosenAnswer=-1;
					else chosenAnswer = Integer.parseInt(answer);
					userAnswers.add(chosenAnswer);
					System.out.println("Matching answer "+chosenAnswer);
				}
				userScore+=((MultiMultipleChoiceQuestion)question).getScore(userAnswers);
				System.out.println("MMC: "+((MultiMultipleChoiceQuestion)question).getScore(userAnswers));
			}else if(question instanceof MultipleChoiceQuestion){
				displayIndex = answerIndex+1;
				String answer = request.getParameter("answer"+displayIndex);
				int chosenAnswer;
				if(answer.equals(null)) chosenAnswer=-1;
				else chosenAnswer = Integer.parseInt(answer);
				System.out.println("Matching answer "+chosenAnswer);
				userScore+=((MultipleChoiceQuestion)question).getScore(chosenAnswer);
				System.out.println("MC: "+((MultipleChoiceQuestion)question).getScore(chosenAnswer));
			}else if(question instanceof OrderedMultiTextQuestion){
				ArrayList<String> userAnswers = new ArrayList<String>();
				for(int orderedMTindex =0;orderedMTindex<numAnswers;orderedMTindex++){
					displayIndex = answerIndex+orderedMTindex+1;
					String answer = request.getParameter("answer"+displayIndex);
					userAnswers.add(answer);
				}				
				userScore+=((OrderedMultiTextQuestion)question).getScore(userAnswers);
				System.out.println("OMTQ: "+((OrderedMultiTextQuestion)question).getScore(userAnswers));
			}else if(question instanceof PictureResponseQuestion){
				displayIndex = answerIndex+1;
				String answer = request.getParameter("answer"+displayIndex);
				userScore+=((PictureResponseQuestion)question).getScore(answer);
				System.out.println("PR: "+((PictureResponseQuestion)question).getScore(answer));
			}else if(question instanceof UnorderedMultiTextQuestion){
				ArrayList<String> userAnswers = new ArrayList<String>();
				for(int unorderedMTindex =0;unorderedMTindex<numAnswers;unorderedMTindex++){
					displayIndex = answerIndex+unorderedMTindex+1;
					String answer = request.getParameter("answer"+displayIndex);
					userAnswers.add(answer);
				}				
				userScore+=((UnorderedMultiTextQuestion)question).getScore(userAnswers);
				System.out.println("UMTQ: "+((UnorderedMultiTextQuestion)question).getScore(userAnswers));
			} answerIndex+=numAnswers;
		}
		//Refresh to results page
		System.out.println("total score: "+userScore);
		RequestDispatcher dispatch = request.getRequestDispatcher("quiz-results.jsp?id="+id+"&time="+elapsedTime+"&score="+userScore);
		dispatch.forward(request, response);
		
	}

}
