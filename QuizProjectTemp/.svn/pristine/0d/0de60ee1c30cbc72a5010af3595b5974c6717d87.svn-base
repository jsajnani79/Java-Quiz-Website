
package QuizProject.QuestionPackage;

import java.util.ArrayList;
import java.util.Set;

import QuizProject.DBConnection;


public class MatchingQuestion extends Question {

	public MatchingQuestion(int id, DBConnection connection){
		super (id, connection);
	}
	
	public void createModelObject(int quizId,String backgroundText, String questionText, ArrayList<String> possibleAnswers, ArrayList<String> actualAnswers) {
		this.createModelObject(quizId, backgroundText, questionText, null, possibleAnswers, null, actualAnswers);
	}
	
	protected void createModelObject(int quizId, String backgroundText, String questionText, String pictureURL, ArrayList<String> possibleAnswers, ArrayList<Object> additionalParameters, ArrayList<String> actualAnswers) {
		ArrayList<Object> parameters = new ArrayList<Object>();

		if (additionalParameters != null) {
			parameters.addAll(additionalParameters);
		}

		super.createModelObject(quizId, "MatchingQuestion", backgroundText, questionText, pictureURL, possibleAnswers, parameters);
		
		for (int i = 0; i < actualAnswers.size(); i++){
			MatchingAnswer ans = new MatchingAnswer(0,this.getConnection());
			ArrayList<String> actualAnswersArray = new ArrayList<String>();
			actualAnswersArray.add(actualAnswers.get(i));
			ans.createModelObject(this.getID(), i, actualAnswersArray);
		}
	}
	
	public int getMaxScore(){
		return 1;
	}
	
	public ArrayList<String> getQuestionsArrayList(){
		return this.getCSV("possibleAnswers");
	}
	
	public ArrayList<String> getAnswersArrayList(){
		ArrayList<String> answersArrayList = new ArrayList<String>();
		ArrayList<Integer> answerIDs = this.getAnswerIDs();
		for (int i = 0; i < answerIDs.size(); i++){
			answersArrayList.add(new MatchingAnswer(answerIDs.get(i), this.getConnection()).getAnswerContent());
		}
		return answersArrayList;
	}
	
	@Override
	public int getScore(Object obj) {
		if(!(obj instanceof ArrayList<?>)){ 
			System.out.println("Error in OrderedMultiTextQuestion.Score, -1 was returned");
			return -1;
		}
		ArrayList<Integer> answerIDs = this.getAnswerIDs();
		ArrayList<String> userAnswers = (ArrayList<String>) obj;
		int score = 0;
		for (int i = 0; i < userAnswers.size(); i++){
			String currAnswer = userAnswers.get(i);
			score += new MatchingAnswer(answerIDs.get(i), this.getConnection()).getScore(currAnswer);
		}
		if (score == answerIDs.size()) return 1;
		return 0;
	}
}
